function _bwrun_check_deps() {
  local missing=()
  typeset -a deps=(bws jq)
  for cmd in ${deps[@]}; do
    if ! command -v $cmd >/dev/null 2>&1; then
      missing+=$cmd
    fi
  done

  if (( ${#missing[@]} )); then
    echo "Error: missing dependencies: ${missing[*]}. Please install them and retry." >&2
    return 1
  fi
}

function _bwrun_prompt_token() {
  if [[ -z $BWS_ACCESS_TOKEN ]]; then
    read "BWS_ACCESS_TOKEN?Enter API token: "
    echo
    export BWS_ACCESS_TOKEN
  fi
}

function _bwrun_select_project() {
  local projects proj_name default_name proj_id

  projects=$(bws project list 2>/dev/null)
  if [[ $? -ne 0 ]]; then
    echo "Error: unable to list projects" >&2
    unser BWS_ACCESS_TOKEN
    return 1
  fi

  echo "Available projects:"
  echo "$projects" | jq -r '.[] | "  * \(.name) (\(.id))"'

  default_name=${BWS_PROJECT_NAME:-}
  if [[ -n $default_name ]]; then
    read "proj_name?Select project name [$default_name]: " 
    [[ -z $proj_name ]] && proj_name=$default_name
  else
    read "proj_name?Select project name: "
  fi

  if [[ -z $proj_name ]]; then
    echo "Error: project name is required" >&2
    return 1
  fi

  proj_id=$(printf '%s' "$projects" \
    | jq -r --arg NAME "$proj_name" '.[] | select(.name==$NAME) | .id')

  if [[ -z $proj_id ]]; then
    echo "Error: no project named '$proj_name'" >&2
    return 1
  fi

  export BWS_PROJECT_NAME=$proj_name
  export BWS_PROJECT_ID=$proj_id
}

bwrun() {
  _bwrun_prompt_token || return 1
  _bwrun_select_project || return 1

  bws run --project-id "$BWS_PROJECT_ID" -- "$@" # Run the given command through bws
}

bwrun "$@"

