
#compdef bwenv

# Check required commands
function _bwenv_check_deps() {
  local deps=(bws jq sops)
  local missing=()
  for cmd in "${deps[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      missing+=("$cmd")
    fi
  done
  if (( ${#missing[@]} )); then
    echo "Error: missing dependencies: ${missing[*]}. Please install them and retry." >&2
    return 1
  fi
}

# Parse arguments for --profile
function _bwenv_parse_args() {
  __BWENV_PROFILE_ARG=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--profile)
        __BWENV_PROFILE_ARG="$2"
        shift 2
        ;;
      *) break ;;
    esac
  done
}

# Select profile file
function _bwenv_select_profile() {
  local config_dir=${BWENV_CONFIG_DIR:-$HOME/.bwenv/profiles}
  if [[ ! -d "$config_dir" ]]; then
    echo "Error: config directory not found: $config_dir" >&2
    return 1
  fi
  local files=("$config_dir"/*)
  # explicit
  if [[ -n $__BWENV_PROFILE_ARG ]]; then
    __BWENV_PROFILE="$__BWENV_PROFILE_ARG"
    return 0
  fi
  # single file
  if (( ${#files[@]} == 1 )); then
    __BWENV_PROFILE=$(basename "${files[1]}")
    return 0
  fi
  # default file
  for f in "${files[@]}"; do
    if [[ $(basename "$f") == default ]]; then
      __BWENV_PROFILE=default
      return 0
    fi
  done
  # prompt until valid
  echo "Available profiles:"
  local choices=()
  for f in "${files[@]}"; do
    local name=$(basename "$f")
    echo "* $name"
    choices+=("$name")
  done
  while true; do
    echo -n "Select profile: "
    read __BWENV_PROFILE
    if [[ " ${choices[*]} " == *" $__BWENV_PROFILE "* ]]; then
      break
    else
      echo "Invalid profile: $__BWENV_PROFILE" >&2
    fi
  done
}

# Load and decrypt env
function _bwenv_load_env() {
  local config_dir=${BWENV_CONFIG_DIR:-$HOME/.bwenv/profiles}
  _bwenv_select_profile || return 1
  local envfile="$config_dir/$__BWENV_PROFILE"
  if [[ ! -f "$envfile" ]]; then
    echo "Error: config file not found at $envfile" >&2
    return 1
  fi
  echo "Loading encrypted config: $envfile"
  setopt localoptions allexport
  source <(sops -d --input-type dotenv --output-type dotenv "$envfile")
  unsetopt localoptions allexport
  if [[ -z $BWS_ACCESS_TOKEN ]]; then
    echo "Error: BWS_ACCESS_TOKEN not set after decrypting $envfile" >&2
    return 1
  fi
}

# Resolve or prompt for project
function _bwenv_resolve_project() {
  if [[ -z $BWS_PROJECT_ID ]]; then
    local projects name
    projects=$(bws project list 2>/dev/null) || { echo "Error: unable to list projects" >&2; return 1; }
    echo "Available projects:"
    echo "$projects" | jq -r '.[] | "* \(.name) (\(.id))"'
    echo -n "Select project name: "
    read name
    [[ -z $name ]] && { echo "Error: project name is required" >&2; return 1; }
    BWS_PROJECT_ID=$(jq -r --arg NAME "$name" '.[] | select(.name==$NAME) | .id' <<<"$projects")
    [[ -z $BWS_PROJECT_ID ]] && { echo "Error: no project named '$name'" >&2; return 1; }
  fi
  local info name
  info=$(bws project get "$BWS_PROJECT_ID" 2>/dev/null) || { echo "Error: unable to fetch project $BWS_PROJECT_ID" >&2; return 1; }
  name=$(jq -r '.name' <<<"$info")
  echo "Using project: $name ($BWS_PROJECT_ID)"
}

# Preview secrets and confirm
function _bwenv_preview_secrets() {
  local keys key confirm
  secrets=$(bws secret list "$BWS_PROJECT_ID" 2>/dev/null  | jq -c '[ .[] | { key, value: (.value | @base64) } ]' ) || { echo "Error: unable to list secrets" >&2; return 1; }
  keys=$(echo "$secrets" | jq -r '.[] | .key')
  echo "Secrets to be injected:"
  while read -r key; do
    echo "* $key"
  done <<<"$keys"
  echo -n "Proceed? [y/N] "
  read confirm
  [[ $confirm =~ ^[Yy]$ ]] || { echo "Aborted."; return 1; }

  setopt localoptions allexport
  echo "$secrets" | jq -c '.[]' | while read -r secret; do
    key="$(echo $secret | jq -r '.key')"
    value="$(echo $secret | jq -r '.value' | base64 -d)"
    export "$key"="$value" 
  done
  unsetopt localoptions allexport
}

function cleanup() {
  unset BWS_PROJECT_ID
  unsetopt localoptions allexport
}

# Main function
function bwenv() {
  trap 'cleanup' EXIT
  set -x
  _bwenv_parse_args "$@"
  _bwenv_check_deps   || return 1
  _bwenv_load_env     || return 1
  _bwenv_resolve_project || return 1
  _bwenv_preview_secrets || return 1
  set +x
  echo "Environment readyÑrun your commands now."
}

# allow direct invocation when autoloaded
bwenv "$@"
